---

- name: Import InfluxDB GPG signing key
  apt_key:
    url: "{{ influxdb_key }}"
    state: present

- name: Add InfluxDB repository
  apt_repository:
    repo: "{{ influxdb_repo }}"
    state: present

- name: Install InfluxDB packages
  apt:
    name: influxdb2
    state: present

#- name: TLS self signed certificate block
#  block:
#    - name: Create a directory if it does not exist
#      file:
#        path: "{{ influxdb_pvt_dir }}"
#        state: directory
#        mode: '0755'
#
#    - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
#      community.crypto.openssl_privatekey:
#        path: "{{ influxdb_pvt_dir }}/{{ influxdb_pem }}"
#
#    - name: Create a directory for Certificate signing request if it does not exist
#      file:
#        path: "{{ influxdb_csr_dir }}"
#        state: directory
#        mode: '0755'
#
#    - name: Create a directory for Certificates if it does not exist
#      file:
#        path: "{{ influxdb_certs_dir }}"
#        state: directory
#        mode: '0755'
#
#    - name: Generate an OpenSSL Certificate Signing Request
#      community.crypto.openssl_csr:
#        path: "{{ influxdb_csr_dir }}/{{ influxdb_csr }}"
#        privatekey_path: "{{ influxdb_pvt_dir }}/{{ influxdb_pem }}"
#        common_name: localhost
#
#    - name: Generate a Self Signed OpenSSL certificate
#      community.crypto.x509_certificate:
#        path: "{{ influxdb_certs_dir }}/{{ influxdb_crt }}"
#        privatekey_path: "{{ influxdb_pvt_dir }}/{{ influxdb_pem }}"
#        csr_path: "{{ influxdb_csr_dir }}/{{ influxdb_csr }}"
#        provider: selfsigned
#
#    - name: Set certificate file permission
#      file:
#        path: "{{ influxdb_certs_dir }}/{{ influxdb_crt }}"
#        owner: influxdb
#        group: influxdb
#        mode: '0644'
#
#    - name: Set private key permission
#      file:
#        path: "{{ influxdb_pvt_dir }}/{{ influxdb_pem }}"
#        owner: influxdb
#        group: influxdb
#        mode: '0600'
#
#  when: selfsigned

## influxdb as service
- name: Copy influxdb config file
  template:
    src: "config.yml.j2"
    dest: "/etc/influxdb/config.yml"
    owner: influxdb
    group: influxdb
    mode: '0644'

- name: Copy influxdb  service config
  template:
    src: "influxd.service.j2"
    dest: "{{ influxdb_systemd }}"
    owner: influxdb
    group: influxdb
    mode: '0644'

- name: Copy influxdb  defaults config
  template:
    src: "default.influxdb2.j2"
    dest: "/etc/default/influxdb2"
    owner: influxdb
    group: influxdb
    mode: '0644'

- name: Start the InfluxDB service
  systemd:
    name: influxdb
    daemon_reload: yes
    state: restarted

- name: Wait for port 8086 to become open on the host after 5 seconds grace period
  wait_for:
    port: 8086
    delay: 5

- name: InfluxDB setup
  command: influx setup --org {{ influxdb_org }} --bucket {{ influxdb_bucket }} --username {{ influxdb_user }} --password {{ influxdb_password }} --force --name default --host http://localhost:8086
  ignore_errors: true


- name:  Include vars with influxdb bucket list
  include_vars:
    file: influxdb_buckets.yml

- name: InfluxDB create buckets
  command: influx bucket create --org {{ influxdb_org }} --name {{ item.name }} --retention {{ item.retention }} --shard-group-duration {{ item.shard_group_duration }}
  ignore_errors: true
  loop: "{{ influxdb_buckets }}"


#- name: Get bucket ID
#  command: influx bucket list --name {{ influxdb_bucket }}
#  register: bucket_id

#- name: Set a variable
#  set_fact:
#    myvar: "{{ bucket_id.stdout }}"

- name: InfluxDB copy tasks files
  copy:
    src: "{{ role_path }}/tasks/influxdb_tasks"
    dest: "/tmp"
    directory_mode: yes
    mode: 0666

- name:  Include vars with influxdb task list
  include_vars:
    file: influxdb_tasks.yml

- name: Set chain name in tasks
  replace:
    path: /tmp/influxdb_tasks/{{ item }}.flux
    regexp: "test_bucket"
    replace: "{{ chain_name }}"
  loop: "{{ influxdb_tasks }}"

- name: InfluxDB create tasks
  command: influx task create --file /tmp/influxdb_tasks/{{ item }}.flux
  ignore_errors: true
  loop: "{{ influxdb_tasks }}"

- name: Get influx auth list
  command: influx auth list --org {{ influxdb_org }} --user {{ influxdb_user }} --json
  register: auth_list

- name: Create InfluxDB token
  command: influx auth create --read-buckets --write-buckets --host http://localhost:8086 --json
  register: token

# This step prints token value that can be used to authenticate influxdb2 API.
- set_fact:
    myvalue: "{{ token.stdout | from_json }}"
- debug:
    var: myvalue.token

- name: Activate influxdb token
  command: influx auth active --id {{ myvalue.id }}